0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@4.1.1
3 info using node@v6.9.2
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/bohdan/Documents/Development/ragnar',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/bohdan/.npm/ragnar/0.0.1/package.tgz not in flight; packing
9 verbose correctMkdir /Users/bohdan/.npm correctMkdir not in flight; initializing
10 info lifecycle ragnar@0.0.1~prepublish: ragnar@0.0.1
11 silly lifecycle ragnar@0.0.1~prepublish: no script for prepublish, continuing
12 info lifecycle ragnar@0.0.1~prepare: ragnar@0.0.1
13 silly lifecycle ragnar@0.0.1~prepare: no script for prepare, continuing
14 verbose tar pack [ '/Users/bohdan/.npm/ragnar/0.0.1/package.tgz',
14 verbose tar pack   '/Users/bohdan/Documents/Development/ragnar' ]
15 verbose tarball /Users/bohdan/.npm/ragnar/0.0.1/package.tgz
16 verbose folder /Users/bohdan/Documents/Development/ragnar
17 verbose addLocalTarball adding from inside cache /Users/bohdan/.npm/ragnar/0.0.1/package.tgz
18 verbose correctMkdir /Users/bohdan/.npm correctMkdir not in flight; initializing
19 silly cache afterAdd ragnar@0.0.1
20 verbose afterAdd /Users/bohdan/.npm/ragnar/0.0.1/package/package.json not in flight; writing
21 verbose correctMkdir /Users/bohdan/.npm correctMkdir not in flight; initializing
22 verbose afterAdd /Users/bohdan/.npm/ragnar/0.0.1/package/package.json written
23 silly publish { name: 'ragnar',
23 silly publish   version: '0.0.1',
23 silly publish   description: 'Reactive architecture for Angular applications',
23 silly publish   main: './lib/Ragnar.js',
23 silly publish   types: './lib/Ragnar.d.ts',
23 silly publish   scripts: { build: 'gulp' },
23 silly publish   author: { name: '@b_donchenko' },
23 silly publish   license: 'ISC',
23 silly publish   devDependencies:
23 silly publish    { gulp: '^3.9.1',
23 silly publish      'gulp-concat': '^2.6.1',
23 silly publish      'gulp-typescript': '^3.1.7',
23 silly publish      typescript: '2.3.2' },
23 silly publish   repository:
23 silly publish    { type: 'git',
23 silly publish      url: 'git+https://github.com/BohdanDonchenko/ragnar.git' },
23 silly publish   dependencies: { rxjs: '^5.4.0' },
23 silly publish   readme: '# Ragnar - Reactive architecture for Angular applications\n\n## Installation\n\nnpm install --save ragnar\n\n## Description\n\nBunch of classes and interfaces for building Reactive Angular applications. Inspired by FLUX.\n\nLet\'s consider main idea of Ragnar architecture - Unidirectional Dataflow.\n\n![Alt text](/readme/simple_arch.png?raw=true)\n\n1. Store is only one. Access to Store is provided through StoreAccessor.\n\n2. StoreAccessor, Services and Actions are singletons.\n\n### 1. Actions\n\nEvery user/application event (save button click or loading additional data on start of app) is independent class inherited from BaseAction. Components dispatch them. Services subscribe to them.\n\nAction need to have a type of payload. Payload - data which is received by Service. In our case  it is a Person class: \n\n``` typescript\nimport { Injectable } from \'@angular/core\';\nimport { Person } from "../models/person.model";\nimport { BaseAction } from "ragnar/BaseAction";\n\n@Injectable()\nexport class AddPersonAction extends BaseAction<Person> {}\n```\n\n### 2. Store Accessor\n\nStore is our DB where we have everything we need. Data collections, states etc.\nApplication is able to have only one store. Store is implementing interface IStore and being injected into StoreAccessor:\n\n``` typescript\nimport { IStore } from "ragnar/IStore";\nimport { Person } from "./models/person.model";\nimport {Injectable} from \'@angular/core\';\n\n@Injectable()\nexport class Store implements IStore {\n    people: Person[] = [];\n}\n```\n\nNow we can inject it into Store Accessor. StoreAccessor is implementaion of IStoreAccessor and inherited from BaseStoreAccessor. It\'s going to be used by Service for changing Store and by Components for updating their state:\n\n``` typescript\nimport { BaseStoreAccessor } from \'ragnar/BaseStoreAccessor\';\nimport { Injectable } from \'@angular/core\'\nimport { Store } from "./store";\n\n@Injectable()\nexport class StoreAccessor extends BaseStoreAccessor<Store> {\n    constructor(store: Store) {\n        super(store);\n    }\n}\n```\n\n### 3. Services\n\nWhole business logic of app is in Services. Service is singleton. Ragnar does not allow us to inject Services. So it should be instantiated in Composition Root. In our case it is AppModule.\n\nServices use StoreAccessor for updating Store and Actions for listening them.\n\n``` typescript\nimport { Injectable } from \'@angular/core\';\nimport { AddPersonAction } from "../actions/add-person.action";\nimport { Person } from "../models/person.model";\nimport { StoreAccessor } from "../store-accessor";\n\n@Injectable()\nexport class PeopleService {\n\n    constructor(\n        private storeAccessor: StoreAccessor,\n        addPersonAction: AddPersonAction\n    ) {\n        addPersonAction.subscribe(person => this.addPerson(person));\n    }\n\n    addPerson(person: Person): void {\n        person.age = person.age + 1;\n\n        this.storeAccessor.updateStore(store => {\n            store.people.push(person)\n            return store;\n        });\n    }\n}\n```\n\n``` typescript\nimport { NgModule, Injector } from \'@angular/core\';\nimport { BrowserModule } from \'@angular/platform-browser\';\n\nimport { PeopleService } from "./services/people.service";\nimport { AddPersonAction } from "./actions/add-person.action";\nimport { Store } from "./store";\nimport { StoreAccessor } from "./store-accessor";\nimport { AppComponent } from "./components/app/app.component";\nimport { PeopleComponent } from "./components/people/people.component";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, PeopleComponent],\n  bootstrap: [AppComponent],\n  providers: [\n    //Store\n    Store,\n    StoreAccessor,\n    //Actions\n    AddPersonAction,\n    //Services\n    PeopleService\n  ]\n})\nexport class AppModule {\n  constructor(private injector: Injector) {\n    /* \n    We need to instantiate every service because \n    they are not going to be injected in any component \n    */\n    injector.get(PeopleService);\n  }\n}\n```\n\n### 4. Components\n\nLast but not least - Components. Components are View layer of the application. They contain only render logic, can dispatch Actions in response to User activity and update themselves by listening Store:\n\n```typescript\nimport { Component } from \'@angular/core\';\nimport { AddPersonAction } from "../../actions/add-person.action";\nimport { Person } from "../../models/person.model";\n\n@Component({\n  selector: \'my-app\',\n  template: `<people></people>`\n})\nexport class AppComponent {\n  constructor(private addPersonAction: AddPersonAction) {\n    //User activity simulation\n    let i = 0;\n    setInterval(() => {\n      i++;\n      let person = {\n        name: "Person " + i,\n        age: i\n      };\n\n      this.addPersonAction.dispatch(person);\n    }, 1000);\n  }\n}\n```\n\n``` typescript\nimport { Component, Input } from \'@angular/core\';\nimport { BaseComponent } from "ragnar/BaseComponent";\nimport { Person } from "../../models/person.model";\nimport { StoreAccessor } from "../../store-accessor";\nimport { Store } from "../../store";\n\n@Component({\n  selector: \'people\',\n  template: `\n    <ul>\n      <li *ngFor="let person of people">{{person.name}} is {{person.age}} years old.</li>\n    </ul>`\n})\nexport class PeopleComponent extends BaseComponent {\n  people: Person[] = [];\n\n  constructor(storeAccessor: StoreAccessor\n  ) {\n    super(storeAccessor);\n  }\n\n  onStoreUpdated(store: Store) {\n    this.people =\n      store.people\n        .sort((a, b) => {\n          return b.age - a.age;\n        })\n        .slice(0, 20);\n  }\n}\n```\n\n### More complex example\n\n![Alt text](/readme/complicated_arch.png?raw=true)\n\n## Sample\n\n```\ngit clone https://github.com/bdonchenko/ragnar.git ragnar\ncd ragnar/sample\nnpm install\nnpm start\n```\n\n\n',
23 silly publish   readmeFilename: 'README.md',
23 silly publish   gitHead: '8ef84fca4f12a7422943ae7e00db890cef5a86a9',
23 silly publish   bugs: { url: 'https://github.com/BohdanDonchenko/ragnar/issues' },
23 silly publish   homepage: 'https://github.com/BohdanDonchenko/ragnar#readme',
23 silly publish   _id: 'ragnar@0.0.1',
23 silly publish   _shasum: 'e9ed95973ac609611417c7ff9d62085946a508d0',
23 silly publish   _from: '.' }
24 info lifecycle ragnar@0.0.1~prepublishOnly: ragnar@0.0.1
25 silly lifecycle ragnar@0.0.1~prepublishOnly: no script for prepublishOnly, continuing
26 verbose getPublishConfig undefined
27 silly mapToRegistry name ragnar
28 silly mapToRegistry using default registry
29 silly mapToRegistry registry https://registry.npmjs.org/
30 silly mapToRegistry data Result {
30 silly mapToRegistry   raw: 'ragnar',
30 silly mapToRegistry   scope: null,
30 silly mapToRegistry   escapedName: 'ragnar',
30 silly mapToRegistry   name: 'ragnar',
30 silly mapToRegistry   rawSpec: '',
30 silly mapToRegistry   spec: 'latest',
30 silly mapToRegistry   type: 'tag' }
31 silly mapToRegistry uri https://registry.npmjs.org/ragnar
32 verbose publish registryBase https://registry.npmjs.org/
33 silly publish uploading /Users/bohdan/.npm/ragnar/0.0.1/package.tgz
34 verbose request uri https://registry.npmjs.org/ragnar
35 verbose request sending authorization for write operation
36 info attempt registry request try #1 at 4:43:21 PM
37 verbose request using bearer token for auth
38 verbose request id 0ed83a690fb9521f
39 http request PUT https://registry.npmjs.org/ragnar
40 http 403 https://registry.npmjs.org/ragnar
41 verbose headers { 'content-type': 'application/json',
41 verbose headers   'cache-control': 'max-age=300',
41 verbose headers   'content-length': '95',
41 verbose headers   'accept-ranges': 'bytes',
41 verbose headers   date: 'Wed, 31 May 2017 13:43:22 GMT',
41 verbose headers   via: '1.1 varnish',
41 verbose headers   connection: 'keep-alive',
41 verbose headers   'x-served-by': 'cache-hhn1530-HHN',
41 verbose headers   'x-cache': 'MISS',
41 verbose headers   'x-cache-hits': '0',
41 verbose headers   'x-timer': 'S1496238202.673617,VS0,VE1313',
41 verbose headers   vary: 'Accept-Encoding' }
42 verbose request invalidating /Users/bohdan/.npm/registry.npmjs.org/ragnar on PUT
43 error publish Failed PUT 403
44 verbose stack Error: "You cannot publish over the previously published version 0.0.1." : ragnar
44 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:304:12)
44 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:292:14)
44 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:212:14)
44 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:186:22)
44 verbose stack     at emitTwo (events.js:106:13)
44 verbose stack     at Request.emit (events.js:191:7)
44 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1081:10)
44 verbose stack     at emitOne (events.js:96:13)
44 verbose stack     at Request.emit (events.js:188:7)
44 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1001:12)
45 verbose statusCode 403
46 verbose pkgid ragnar
47 verbose cwd /Users/bohdan/Documents/Development/ragnar
48 error Darwin 16.6.0
49 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
50 error node v6.9.2
51 error npm  v4.1.1
52 error code E403
53 error "You cannot publish over the previously published version 0.0.1." : ragnar
54 error If you need help, you may report this error at:
54 error     <https://github.com/npm/npm/issues>
55 verbose exit [ 1, true ]
